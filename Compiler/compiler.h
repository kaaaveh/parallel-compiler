// ML: 1
#ifndef _INCLUDED_COMPILER_H
#define _INCLUDED_COMPILER_H

#include <iosfwd>
#include <future>
#include <fstream>

#include "../CompilationJobs/compilationjobs.h"

class Compiler
{
    int d_result = -1;      // ML: Maybe use an enum here.
    std::ofstream errorFile;
    public:
        Compiler();
        bool compile(std::string const &sourceFile, std::string const &outputFile);
        void sendResult(std::promise<CompilationJobs> &px, std::string const &sourceFile);
        void getResult(std::future<CompilationJobs> &fx);

    private:
        void handleCompilationError(std::string const &sourceFile);
};

#endif

/*
 * Also implement the classes actually performing the compilation.
 * This involves calling the compiler (using the appropriate
 * compilation flags) and determining whether the compilation
 * suceeded or not.
 * Here you must pay attention to how error messages that
 * may be generated by the compiler are handled.
 * 
 * Hint: write error messages to a temporary file;
 * upon completion the result (future?) may contain
 * information about the success of the compilation and
 * the name of the temporary file.
*/
